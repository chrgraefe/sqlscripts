USE master
GO


IF OBJECT_ID('dbo.T_DDL_EVENTLOG') IS NULL
BEGIN
	CREATE TABLE [dbo].[T_DDL_EVENTLOG]
	(
		[SATZ_ID] [int] IDENTITY(1,1) NOT NULL,
		[EVENTTIME] [DATETIME] NULL,
		[EVENTTYPE] [VARCHAR](15) NULL,
		[SERVERNAME] [VARCHAR](25) NULL,
		[DATABASENAME] [VARCHAR](25) NULL,
		[OBJECTTYPE] [VARCHAR](25) NULL,
		[OBJECTNAME] [VARCHAR](25) NULL,
		[USERNAME] [VARCHAR](50) NULL,
		[LOGIN] [VARCHAR](50) NULL,
		[COMMANDTEXT] [VARCHAR](MAX) NULL,
		CONSTRAINT [PK_T_DDL_EVENTLOG] PRIMARY KEY CLUSTERED ([SATZ_ID] ASC)
	)
END
GO


DISABLE TRIGGER [TRG_DDL_LOG] ON ALL SERVER
GO
 
-- Create Database DDL Trigger
CREATE TRIGGER TRG_DDL_LOG ON ALL SERVER 
FOR 
 CREATE_APPLICATION_ROLE, ALTER_APPLICATION_ROLE, DROP_APPLICATION_ROLE
,CREATE_ASSEMBLY, ALTER_ASSEMBLY, DROP_ASSEMBLY
,CREATE_ASYMMETRIC_KEY, ALTER_ASYMMETRIC_KEY, DROP_ASYMMETRIC_KEY
,ALTER_AUTHORIZATION_DATABASE
,CREATE_CERTIFICATE, ALTER_CERTIFICATE, DROP_CERTIFICATE
,CREATE_CONTRACT, DROP_CONTRACT
,CREATE_CREDENTIAL, ALTER_CREDENTIAL, DROP_CREDENTIAL
,GRANT_DATABASE, DENY_DATABASE, REVOKE_DATABASE
,CREATE_DEFAULT, DROP_DEFAULT
,BIND_DEFAULT, UNBIND_DEFAULT
,CREATE_EVENT_NOTIFICATION, DROP_EVENT_NOTIFICATION
,CREATE_EXTENDED_PROPERTY, ALTER_EXTENDED_PROPERTY, DROP_EXTENDED_PROPERTY
,CREATE_FULLTEXT_CATALOG, ALTER_FULLTEXT_CATALOG, DROP_FULLTEXT_CATALOG
,CREATE_FULLTEXT_INDEX, ALTER_FULLTEXT_INDEX, DROP_FULLTEXT_INDEX
,CREATE_FUNCTION, ALTER_FUNCTION, DROP_FUNCTION
,CREATE_INDEX, ALTER_INDEX, DROP_INDEX
,CREATE_MASTER_KEY, ALTER_MASTER_KEY, DROP_MASTER_KEY
,CREATE_MESSAGE_TYPE, ALTER_MESSAGE_TYPE, DROP_MESSAGE_TYPE
,CREATE_PARTITION_FUNCTION, ALTER_PARTITION_FUNCTION, DROP_PARTITION_FUNCTION
,CREATE_PARTITION_SCHEME, ALTER_PARTITION_SCHEME, DROP_PARTITION_SCHEME
,CREATE_PLAN_GUIDE, ALTER_PLAN_GUIDE, DROP_PLAN_GUIDE
,CREATE_PROCEDURE, ALTER_PROCEDURE, DROP_PROCEDURE
,CREATE_QUEUE, ALTER_QUEUE, DROP_QUEUE
,CREATE_REMOTE_SERVICE_BINDING, ALTER_REMOTE_SERVICE_BINDING, DROP_REMOTE_SERVICE_BINDING
,CREATE_SPATIAL_INDEX
,RENAME  
,CREATE_ROLE, ALTER_ROLE, DROP_ROLE
,ADD_ROLE_MEMBER, DROP_ROLE_MEMBER
,CREATE_ROUTE, ALTER_ROUTE, DROP_ROUTE
,CREATE_RULE, DROP_RULE
,BIND_RULE, UNBIND_RULE
,CREATE_SCHEMA, ALTER_SCHEMA, DROP_SCHEMA
,CREATE_SERVICE, ALTER_SERVICE, DROP_SERVICE
,ADD_SIGNATURE, DROP_SIGNATURE
,CREATE_STATISTICS, DROP_STATISTICS, UPDATE_STATISTICS
,CREATE_SYMMETRIC_KEY, ALTER_SYMMETRIC_KEY, DROP_SYMMETRIC_KEY
,CREATE_SYNONYM, DROP_SYNONYM
,CREATE_TABLE, ALTER_TABLE
,DROP_TABLE, CREATE_TRIGGER
,ALTER_TRIGGER, DROP_TRIGGER
,CREATE_TYPE, DROP_TYPE
,CREATE_USER, ALTER_USER, DROP_USER
,CREATE_VIEW, ALTER_VIEW, DROP_VIEW
,CREATE_XML_INDEX
,CREATE_XML_SCHEMA_COLLECTION, ALTER_XML_SCHEMA_COLLECTION, DROP_XML_SCHEMA_COLLECTION
,ALTER_AUTHORIZATION_SERVER
,CREATE_DATABASE, ALTER_DATABASE, DROP_DATABASE
,CREATE_ENDPOINT, ALTER_ENDPOINT, DROP_ENDPOINT
,CREATE_EXTENDED_PROCEDURE, DROP_EXTENDED_PROCEDURE
,ALTER_INSTANCE, CREATE_LINKED_SERVER
,ALTER_LINKED_SERVER, DROP_LINKED_SERVER
,CREATE_LINKED_SERVER_LOGIN, DROP_LINKED_SERVER_LOGIN
,CREATE_LOGIN, ALTER_LOGIN, DROP_LOGIN
,CREATE_MESSAGE, ALTER_MESSAGE, DROP_MESSAGE
,CREATE_REMOTE_SERVER, ALTER_REMOTE_SERVER, DROP_REMOTE_SERVER
,GRANT_SERVER, DENY_SERVER, REVOKE_SERVER
,ADD_SERVER_ROLE_MEMBER, DROP_SERVER_ROLE_MEMBER

AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @xmlEventData XML = eventdata();

	-- Insert information to a EventLog table
	INSERT INTO master.[dbo].[T_DDL_EVENTLOG]
	(
	EVENTTIME,
	EVENTTYPE,
	SERVERNAME,
	DATABASENAME,
	OBJECTTYPE,
	OBJECTNAME,
	USERNAME,
	COMMANDTEXT
	)
	SELECT 
	REPLACE(CONVERT(VARCHAR(50), @xmlEventData.query('data(/EVENT_INSTANCE/PostTime)')), 'T',  ' '),
	CONVERT(VARCHAR(15), @xmlEventData.query('data(/EVENT_INSTANCE/EventType)')),
	CONVERT(VARCHAR(25), @xmlEventData.query('data(/EVENT_INSTANCE/ServerName)')),
	CONVERT(VARCHAR(25), @xmlEventData.query('data(/EVENT_INSTANCE/DatabaseName)')),
	CONVERT(VARCHAR(25), @xmlEventData.query('data(/EVENT_INSTANCE/ObjectType)')),
	CONVERT(VARCHAR(25), @xmlEventData.query('data(/EVENT_INSTANCE/ObjectName)')),
	CONVERT(VARCHAR(50), @xmlEventData.query('data(/EVENT_INSTANCE/UserName)')),
	CONVERT(VARCHAR(MAX), @xmlEventData.query('data(/EVENT_INSTANCE/TSQLCommand/CommandText)'))
	;
	
END
GO

ENABLE TRIGGER [TRG_DDL_LOG] ON ALL SERVER
GO


/*
DISABLE TRIGGER [TRG_DDL_LOG] ON ALL SERVER
GO
ENABLE TRIGGER [TRG_DDL_LOG] ON ALL SERVER
GO
*/